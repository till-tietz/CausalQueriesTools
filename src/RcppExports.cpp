// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_type_prob_c
std::vector<double> get_type_prob_c(arma::mat P, std::vector<double> parameters);
RcppExport SEXP _CQBigModel_get_type_prob_c(SEXP PSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(get_type_prob_c(P, parameters));
    return rcpp_result_gen;
END_RCPP
}
// get_type_prob_multiple_c
arma::mat get_type_prob_multiple_c(arma::mat params, arma::mat P);
RcppExport SEXP _CQBigModel_get_type_prob_multiple_c(SEXP paramsSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(get_type_prob_multiple_c(params, P));
    return rcpp_result_gen;
END_RCPP
}
// get_type_prob_cstd
std::vector<double> get_type_prob_cstd(std::vector<double> P, std::vector<double> parameters, int nrow, int ncol);
RcppExport SEXP _CQBigModel_get_type_prob_cstd(SEXP PSEXP, SEXP parametersSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type P(PSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(get_type_prob_cstd(P, parameters, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// get_type_prob_multiple_cstd
std::vector<double> get_type_prob_multiple_cstd(std::vector<double> params, std::vector<double> P, int nrow, int ncol, int nrow_p, int ncol_p);
RcppExport SEXP _CQBigModel_get_type_prob_multiple_cstd(SEXP paramsSEXP, SEXP PSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP nrow_pSEXP, SEXP ncol_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow_p(nrow_pSEXP);
    Rcpp::traits::input_parameter< int >::type ncol_p(ncol_pSEXP);
    rcpp_result_gen = Rcpp::wrap(get_type_prob_multiple_cstd(params, P, nrow, ncol, nrow_p, ncol_p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CQBigModel_get_type_prob_c", (DL_FUNC) &_CQBigModel_get_type_prob_c, 2},
    {"_CQBigModel_get_type_prob_multiple_c", (DL_FUNC) &_CQBigModel_get_type_prob_multiple_c, 2},
    {"_CQBigModel_get_type_prob_cstd", (DL_FUNC) &_CQBigModel_get_type_prob_cstd, 4},
    {"_CQBigModel_get_type_prob_multiple_cstd", (DL_FUNC) &_CQBigModel_get_type_prob_multiple_cstd, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_CQBigModel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
